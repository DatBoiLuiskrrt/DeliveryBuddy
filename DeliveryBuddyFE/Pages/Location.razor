@page "/Locations"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Mvc;
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo

<PageTitle>Locations</PageTitle>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="h3 text-danger">@errorMessage</div>
}

<h1>Please select your state and city!</h1>
<button type="button" class="btn btn-danger" style="margin: 1em 0;" @onclick="@Reset">Reset</button>

<SfDropDownList TValue="string" TItem="StatesModel" DataSource="@States" Placeholder="Select a state">
    <DropDownListFieldSettings Value="Id" Text="StateName"></DropDownListFieldSettings>
    <DropDownListEvents TValue="string" TItem="StatesModel" ValueChange="@FetchAllCities"></DropDownListEvents>
</SfDropDownList>



@if (Locations is not null)
{
    @foreach (var l in Locations)
    {
        <div style="border: 1px solid red; padding: 1em 1em; margin: 1em 0;" @onclick="@(() => FetchAllComments(@l.Id))" id="locationsContainer">
            <div class="h2">@l.HouseNumber @l.StreetName</div>
            <div class="h4" style="text-decoration:underline;">See More...</div>
        </div>
    }
}
@if (Comments is not null)
{
    @foreach (var c in Comments)
    {
        <div style="border: 1px solid red; padding: 1em 1em; margin: 1em 0;">
            <div class="h2">@c.CommentDescription</div>
        </div>
    }
}
<div style="display:flex; flex-wrap: wrap; width: 100%; margin: 1em 0;">
@if (Cities is not null)
{
    @foreach (var city in Cities)
    {
        <div style= "">
            <div style="border: 1px solid black; border-radius:5px ; padding: 1em 1em; margin: .2em .2em; cursor=pointer; background-color: #6f42c1; color: white;" @onclick="@(() => FetchLocations(@city.Id))">
                <div class="h2">@city.CityName</div>
                @*<div class="h5" style="text-decoration:underline; font-weight:50;">See More...</div>*@
            </div>
        </div>
    }
}
</div>


@code {
    private List<LocationsModel>? Locations;
    private List<StatesModel>? States;
    private List<CitiesModel>? Cities;
    private List<CommentsModel>? Comments;
    private HttpClient? client;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        FetchAllStates();
    }
    private void Reset()
    {
        Locations = null;
        States = null;
        Cities = null;
        Comments = null;
        InvokeAsync(StateHasChanged);
    }
    private async void FetchAllStates()
    {

        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            States = await client.GetFromJsonAsync<List<StatesModel>>("GetAllStates");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);
    }

    public int SelectedValue;
    private async void FetchAllCities(ChangeEventArgs<string, StatesModel> args)
    {
        SelectedValue = args.ItemData.Id;
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            Cities = await client.GetFromJsonAsync<List<CitiesModel>>($"GetAllCitiesByStateId?Id={SelectedValue}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        Comments = null;
        await InvokeAsync(StateHasChanged);
    }
    private async void FetchLocations(int Id)
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            Locations = await client.GetFromJsonAsync<List<LocationsModel>>($"Locations/GetLocationsByCityId?Id={Id}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        //removes locations from view if city has locations.
        if (Locations is null)
        {
            Cities = null;
        }
        await InvokeAsync(StateHasChanged);

    }
    private async void FetchAllComments(int Id)
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            Comments = await client.GetFromJsonAsync<List<CommentsModel>>($"Comments/GetCommentsByLocationId?Id={Id}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        Locations = null;
        Cities = null;
        await InvokeAsync(StateHasChanged);
    }
}
