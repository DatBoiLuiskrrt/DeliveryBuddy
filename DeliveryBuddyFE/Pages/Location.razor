@page "/Locations"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Mvc;
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo

<PageTitle>Locations</PageTitle>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="h3 text-danger">@errorMessage</div>
}

<h1>Locations Page what's up fool</h1>

<button class="btn btn-primary" @onclick="() => FetchLocations(2)">Get Locations</button>
<button class="btn btn-primary" @onclick="() => FetchAllStates()">Get All States</button>
<button class="btn btn-primary" @onclick="() => FetchAllCities()">Get All Citites</button>


<SfDropDownList TValue="string" TItem="StatesModel" DataSource="@States" Placeholder="Select a state">
    <DropDownListFieldSettings Value="Id" Text="StateName"></DropDownListFieldSettings>
</SfDropDownList>



@*@if (States is not null)
{
    @foreach (var state in States)
    {
        <div style="border: 1px solid red; padding: 1em 1em; margin: 1em 0;">
            <div class="h2">@state.StateName, @state.StateCode, @state.Id</div>
            <div class="h4" style="text-decoration:underline;">See More...</div>
        </div>
    }
}
*@

@if (Locations is not null)
{
    @foreach (var l in Locations)
    {
        <div style="border: 1px solid red; padding: 1em 1em; margin: 1em 0;">
            <div class="h2">@l.HouseNumber @l.StreetName</div>
            <div class="h4" style="text-decoration:underline;">See More...</div>
        </div>
    }
}

@if (Cities is not null)
{
    @foreach (var city in Cities)
    {
        <div style="border: 1px solid red; padding: 1em 1em; margin: 1em 0;">
            <div class="h2">@city.CityName</div>
            <div class="h4" style="text-decoration:underline;">See More...</div>
        </div>
    }
}


@code {
    private List<LocationsModel>? Locations;
    private List<StatesModel>? States;
    private List<CitiesModel>? Cities;
    private HttpClient? client;
    private string? errorMessage;

    private async void FetchAllStates()
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            States = await client.GetFromJsonAsync<List<StatesModel>>("GetAllStates");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void FetchAllCities()
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            Cities = await client.GetFromJsonAsync<List<CitiesModel>>("GetAllCitiesByStateId?Id=2");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void FetchLocations(int CityId)
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        try
        {
            Locations = await client.GetFromJsonAsync<List<LocationsModel>>($"Locations/GetLocationsByCityId?Id={CityId}");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);

    }
}
